plugins {
    id 'java'
    id 'war'

    id 'eclipse'
    id 'idea'
    // id 'application'
}

// no main method
// https://stackoverflow.com/questions/8630496/main-class-of-a-tomcat-web-application
// https://gist.github.com/Antowka/b99b6259376a7eb44c22

repositories {
    mavenCentral()
}

// eclipse.project {
//     natures "org.eclipse.buildship.core.gradleprojectnature"
// }

// def _groupID = 'io.github.gipo999'
// def _artifactID = 'rest.base'
// def _mainClass = 'Application'

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

// mainClassName = "com.smi.xxx.rest.base.Application"

sourceCompatibility = 21
targetCompatibility = 21
project.webAppDirName = 'src/main/webapp'

def JERSEY_VERSION = "2+"
// IMP: compatibliity with tomcat 9?
// jersey 2+ works only with tomcat 9+
// jersey 3+ works only with tomcat 10+
// check docke compose file
// https://stackoverflow.com/questions/62595510/severe-servlet-jersey-web-application-in-web-application-restapp-threw-loa
def TOMCAT_VERSION = "9+"

java {
    toolchain {
	languageVersion = JavaLanguageVersion.of(21)
    }
}

dependencies {
    implementation(group: 'org.slf4j', name: 'slf4j-api', version: '2+')

    // requires tomcat 9? why is this a dependency if it's a war to be deployed on tomcat?
    compileOnly(group: 'org.apache.tomcat', name: 'tomcat-catalina', version: "${TOMCAT_VERSION}")

    implementation('javax.xml.bind:jaxb-api:2.3.1')

    implementation(group: 'jakarta.ws.rs', name: 'jakarta.ws.rs-api', version: "2+")

    implementation(group: 'org.glassfish.jersey.core', name: 'jersey-client', version: "${JERSEY_VERSION}")
    implementation(group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: "${JERSEY_VERSION}")
    implementation(group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: "${JERSEY_VERSION}")
    implementation(group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: "${JERSEY_VERSION}")

    implementation(group: 'org.slf4j', name: 'slf4j-simple', version: '2+')

    implementation(group: 'com.google.code.gson', name: 'gson', version: "2+")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.0")

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.10.0")

    testImplementation(group: 'org.glassfish.jersey.core', name: 'jersey-client', version: "${JERSEY_VERSION}")


//    implementation group: 'com.smi', name: 'smi-commons-gson', version: "${SMI_COMMONS}"
//    implementation group: 'com.smi', name: 'smi-commons-jersey', version: "${SMI_COMMONS}"
//    implementation group: 'com.smi', name: 'smi-commons-yaml', version: "${SMI_COMMONS}"
//    implementation group: 'com.smi', name: 'smi-commons-lang', version: "${SMI_COMMONS}"
//    implementation group: 'com.smi', name: 'smi-commons-singleton', version: "${SMI_COMMONS}"
//    implementation group: 'com.smi', name: 'smi-commons-pool', version: "${SMI_COMMONS}"

}

// ext {
//    javaMainClass = "com.smi.xxx.rest.base.Application"
//     // javaMainClass = _groupID + "." + _artifactID + "." + _mainClass
// }

// jar {
//   manifest {
//     attributes(
//       // 'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
//       'Main-Class': 'com.smi.xxx.rest.base.Application'
//     )
//   }
// }

// application {
//     mainClassName = javaMainClass
// }

test {
    useJUnitPlatform {
        exclude("**/integration/**")
    }

    testLogging {
        events "passed", "skipped", "failed"
    }
}

task cleanEclipse(type: Delete, overwrite: true) {
    delete '.project'

    delete '.classpath'

    delete '.settings'

    delete "bin"
}

tasks.register('integrationTest', Test) {
    group = 'verification'

    useJUnitPlatform {
        include("**/integration/**")
    }

    testLogging {
        events "passed", "skipped", "failed"
    }
}
